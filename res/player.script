local anim_idle_down = hash("player-idle-down")
local anim_move_down = hash("player-move-down")
local anim_idle_up = hash("player-idle-up")
local anim_move_up = hash("player-move-up")
local anim_idle_side = hash("player-idle-side")
local anim_move_side = hash("player-move-side")

local animations = {
	move = {
		up = anim_move_up,
		down = anim_move_down,
		side = anim_move_side
	},
	idle = {
		up = anim_idle_up,
		down = anim_idle_down,
		side = anim_idle_side
	}
}

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("operator#camera", "enable")
	msg.post("@render:", "use_camera_projection")
	msg.post("/enemyspawner", "pos_updated", {pos = go.get_position()})

	self.moving = false
	self.firing = false

	self.input = vmath.vector3()
	self.dir = vmath.vector3(0, 1, 0)
	self.speed = 50
	self.anim = nil
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		sprite.play_flipbook("#sprite", anim)
		-- remember which animation is playing
		self.anim = anim
	end
end

local function update_animation(self, state)
	
	sprite.set_hflip("#sprite", self.dir.x < 0 and self.dir.y == 0)
	
	if self.dir.y < 0 then
		play_animation(self, animations[state].down)
	elseif self.dir.y > 0 then
		play_animation(self, animations[state].up)
	elseif self.dir.x ~= 0 then
		play_animation(self, animations[state].side)
	end
end

function update(self, dt)
	local pos = go.get_position()

	-- Обновление позиции
	if self.moving then
		pos = pos + self.dir * self.speed * dt
		go.set_position(pos)
		
		-- Переключение анимации движения
		update_animation(self, "move")

		msg.post("/enemyspawner", "pos_updated", {pos = go.get_position()})
	else
		-- Переключение анимации ожидания
		update_animation(self, "idle")
	end

	-- Логика стрельбы
	if self.firing then
		local angle = math.atan2(self.dir.y, self.dir.x)
		local rot = vmath.quat_rotation_z(angle)
		local props = { dir = self.dir }
		factory.create("#rocketfactory", nil, rot, props)
	end

	-- Сброс ввода
	self.input.x = 0
	self.input.y = 0

	-- Сброс состояний
	self.firing = false
	self.moving = false
end

function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.input.y = 1
	elseif action_id == hash("down")  then
		self.input.y = -1
	elseif action_id == hash("left") then
		self.input.x = -1
	elseif action_id == hash("right") then
		self.input.x = 1
	elseif action_id == hash("fire") and action.pressed then
		self.firing = true
	end

	if vmath.length(self.input) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.input)
	end
end


